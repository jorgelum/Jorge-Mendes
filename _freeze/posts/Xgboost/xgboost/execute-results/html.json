{
  "hash": "f6cadd1730e97fcfef70dd7133e9cec7",
  "result": {
    "markdown": "---\ntitle: \"Como utilizar o xgboost no R\"\nauthor: \"Jorge Luiz Mendes\"\ndate: \"2023-11-15\"\ncategories: [xgboost,classificação,Tree]\nimage: \"image.png\"\ndescription: \"O xgboost é uma biblioteca poderosa para criar modelos de previsão\"\nbibliography: references.bib\n---\n\n\n## Introdução\n\nO XGBoost (Extreme Gradient Boosting)[@xgboost] é uma biblioteca de código aberto que fornece um algoritmo de aprendizado de máquina de aumento de gradiente para tarefas de classificação, regressão e outros tipos de previsão. Ele se baseia na técnica de ensemble learning, que combina vários modelos de aprendizado de máquina mais simples para criar um modelo mais poderoso.\n\n![Fonte: https://siliconvalley.basisindependent.com/](image.png){fig-align=\"center\"}\n\nO XGBoost usa uma estratégia de aumento de gradiente para construir um modelo preditivo de forma iterativa, em que cada novo modelo é treinado para corrigir os erros cometidos pelos modelos anteriores. O algoritmo utiliza árvores de decisão como modelo base, que são combinadas usando um algoritmo de aumento de gradiente para produzir um modelo mais preciso e robusto.\n\n## Bibliotecas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) #tratamento de dados\nlibrary(knitr) #tabelas\nlibrary(xgboost) \nlibrary(caret)\nlibrary(ggplot2) #gráficos\n```\n:::\n\n\n## Carregando os dados\n\nOs dados podem ser encontrados no [kaggle](https://www.kaggle.com/datasets/uciml/german-credit).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"GermanCredit.csv\")\ndf <- df |> select(2:11)\ndf[df==\"\"] <- NA\ndf |> head() |> \n  knitr::kable(col.names = c(\"Age\",\"Sex\",\"Job\",\"Housing\",\"Saving.accounts\",\n                             \"Checking.account\",\"Credit.amount\",\"Duration\",\n                             \"Purpose\",\"Risk\"))\n```\n\n::: {.cell-output-display}\n| Age|Sex    | Job|Housing |Saving.accounts |Checking.account | Credit.amount| Duration|Purpose             |Risk |\n|---:|:------|---:|:-------|:---------------|:----------------|-------------:|--------:|:-------------------|:----|\n|  67|male   |   2|own     |NA              |little           |          1169|        6|radio/TV            |good |\n|  22|female |   2|own     |little          |moderate         |          5951|       48|radio/TV            |bad  |\n|  49|male   |   1|own     |little          |NA               |          2096|       12|education           |good |\n|  45|male   |   2|free    |little          |little           |          7882|       42|furniture/equipment |good |\n|  53|male   |   2|free    |little          |little           |          4870|       24|car                 |bad  |\n|  35|male   |   1|free    |NA              |NA               |          9055|       36|education           |good |\n:::\n:::\n\n\nPodemos ver o tipo de dado que estamos analisando:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 10\n$ Age              <int> 67, 22, 49, 45, 53, 35, 53, 35, 61, 28, 25, 24, 22, 6…\n$ Sex              <chr> \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"ma…\n$ Job              <int> 2, 2, 1, 2, 2, 1, 2, 3, 1, 3, 2, 2, 2, 1, 2, 1, 2, 2,…\n$ Housing          <chr> \"own\", \"own\", \"own\", \"free\", \"free\", \"free\", \"own\", \"…\n$ Saving.accounts  <chr> NA, \"little\", \"little\", \"little\", \"little\", NA, \"quit…\n$ Checking.account <chr> \"little\", \"moderate\", NA, \"little\", \"little\", NA, NA,…\n$ Credit.amount    <int> 1169, 5951, 2096, 7882, 4870, 9055, 2835, 6948, 3059,…\n$ Duration         <int> 6, 48, 12, 42, 24, 36, 24, 36, 12, 30, 12, 48, 12, 24…\n$ Purpose          <chr> \"radio/TV\", \"radio/TV\", \"education\", \"furniture/equip…\n$ Risk             <chr> \"good\", \"bad\", \"good\", \"good\", \"bad\", \"good\", \"good\",…\n```\n:::\n:::\n\n\nPodemos ver algumas estatísticas dos dados:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Age            Sex                 Job          Housing         \n Min.   :19.00   Length:1000        Min.   :0.000   Length:1000       \n 1st Qu.:27.00   Class :character   1st Qu.:2.000   Class :character  \n Median :33.00   Mode  :character   Median :2.000   Mode  :character  \n Mean   :35.55                      Mean   :1.904                     \n 3rd Qu.:42.00                      3rd Qu.:2.000                     \n Max.   :75.00                      Max.   :3.000                     \n Saving.accounts    Checking.account   Credit.amount      Duration   \n Length:1000        Length:1000        Min.   :  250   Min.   : 4.0  \n Class :character   Class :character   1st Qu.: 1366   1st Qu.:12.0  \n Mode  :character   Mode  :character   Median : 2320   Median :18.0  \n                                       Mean   : 3271   Mean   :20.9  \n                                       3rd Qu.: 3972   3rd Qu.:24.0  \n                                       Max.   :18424   Max.   :72.0  \n   Purpose              Risk          \n Length:1000        Length:1000       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n```\n:::\n:::\n\n\nPodemos ver quantidade de linhas vazias em cada coluna:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in colnames(df)){\n  v <- df[,i] |> is.na() |> sum()\n  print(paste(\"coluna:\",i,\"|Número de linhas vazias:\",v))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"coluna: Age |Número de linhas vazias: 0\"\n[1] \"coluna: Sex |Número de linhas vazias: 0\"\n[1] \"coluna: Job |Número de linhas vazias: 0\"\n[1] \"coluna: Housing |Número de linhas vazias: 0\"\n[1] \"coluna: Saving.accounts |Número de linhas vazias: 183\"\n[1] \"coluna: Checking.account |Número de linhas vazias: 394\"\n[1] \"coluna: Credit.amount |Número de linhas vazias: 0\"\n[1] \"coluna: Duration |Número de linhas vazias: 0\"\n[1] \"coluna: Purpose |Número de linhas vazias: 0\"\n[1] \"coluna: Risk |Número de linhas vazias: 0\"\n```\n:::\n:::\n\n\n## Análise Exploratória\n\nPodemos ver a proporção de homens e mulheres.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_s <-df |> group_by(Sex) |>  \n   summarise(count = n())  \npie(data_s$count,labels = data_s$Sex,\nmain = \"Proporção de homens e mulheres\")\n```\n\n::: {.cell-output-display}\n![](xgboost_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nA distribuição de idade:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> select(Age)|> ggplot(aes(x =Age)) +\n  geom_histogram(fill =\"#454df8\",bins = 30) +\n  labs(title = \"Distribuição de Idades\", y =\"\",x =\"Idades\",\n       caption = \"Mendes, Jorge L.,2023\")+\n  theme(plot.title = element_text(face = \"bold\",size = 14),\n        axis.text.x = element_text(face = \"bold\",colour = \"#030202\",size =10),\n        axis.text.y = element_text(face = \"bold\",colour = \"#030202\",size =10))\n```\n\n::: {.cell-output-display}\n![](xgboost_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nPodemos analisar a relação entre idade e quantia de crédito:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> ggplot() +\n  geom_point(aes(x = Age, y = Credit.amount,color = Risk)) +\n  scale_color_manual(values =  c(\"#ed6002\",\"#02db47\")) +\n  labs(title = \"Relação entre crédito e idade\",\n       y = \"Quantidade de Crédito\", x= \"Idade\",\n       caption = \"Mendes, Jorge L.,2023\") +\n  theme(plot.title = element_text(face = \"bold\",colour = \"#030202\",size =15))\n```\n\n::: {.cell-output-display}\n![](xgboost_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Modelagem\n\n### Transformação\n\nPrimeiro devemos transformar os dados categóricos em binários (0 e 1).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |> mutate(SexBi =case_when(\n  Sex ==\"male\"~ 0\n  ,Sex == \"female\"~ 1\n),\nRiskBi= case_when(Risk ==\"bad\"~0,\n                  Risk ==\"good\"~1))\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Binário\n\nSe as variáveis forem binárias como bem e mal, arriscado e seguro, e etc basta fazer como foi mostrado no tópico Transformação. Caso tenha mais parâmetros (por exemplo fácil,moderado e difícil) é necesário criar novas colunas que serão chamadas de variáveis dummies preenche-las com 0 e 1 conforme a ausência ou presença.\n:::\n\n### Seleção\n\nPara abastecer o modelo é necessário definir quais serão as variáveis de entrada e de saída. Para nosso problema queremos criar um modelo que classifique o risco do empréstimo com base na idade, sexo, crédito e duração. E pela quantidade de dados podemos separar um conjunto de treino e um conjunto de teste de forma aleatória para podermos avaliar o modelo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nindice_treino <- sample(1:nrow(df),0.7*nrow(df),replace = FALSE)\n\n\ndf_train <-df[indice_treino,]\ndf_test <-df[-indice_treino,]\n\nX_train <- df_train |> select(Age,Credit.amount,SexBi,Duration)\ny_train <- df_train |> select(RiskBi)\n\nX_test <- df_test |> select(Age,Credit.amount,SexBi,Duration)\ny_test <- df_test |> select(RiskBi)\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Seleção\n\nOs dados a serem selecionados podem ser determinados com análises estatísticas mais profundas como correlações e pca, e também vai depender da natureza do problema e do custo computacional envolvido.\n\nÉ possível fazer uma limpeza dos dados, ou seja, descartar linhas que podem atrapalhar o desempenho do modelo, preecher linhas que possuem dados ausentes, remover outliers, e etc.\n:::\n\n### Modelo\n\nCom os dados separados podemos escolher os parâmetros do modelo para treina-lo. Podemos definir o algoritmo, a profundidade da árvore, o número de iterações e entre outros parâmetros.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparametros <- list(objective = \"binary:logistic\", \n                    eval_metric = \"error\"\n                   )\nmodelo <- xgboost(data = as.matrix(X_train),\n                  label = as.matrix(y_train),\n                  nrounds = 1,\n                  eta =0.1,\n                  params = parametros)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]\ttrain-error:0.228571 \n```\n:::\n:::\n\n\nAqui podemos ver como fica a visualzação de apenas um árvore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb.plot.tree(model = modelo, fsize = 8, margin = 30, \n              ylim = c(0, 0.2), xlimits = c(0, 1),\n              show_info = TRUE, dpi = 150)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"grViz html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-c9814ed66ee7e241456d\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c9814ed66ee7e241456d\">{\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"dot\\\",\\n       rankdir = \\\"LR\\\"]\\n\\nnode [color = \\\"DimGray\\\",\\n      style = \\\"filled\\\",\\n      fontname = \\\"Helvetica\\\"]\\n\\nedge [color = \\\"DimGray\\\",\\n     arrowsize = \\\"1.5\\\",\\n     arrowhead = \\\"vee\\\",\\n     fontname = \\\"Helvetica\\\"]\\n\\n  \\\"1\\\" [label = \\\"Tree 0\\nDuration\\nCover: 175\\nGain: 19.8601608\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"2\\\" [label = \\\"Credit.amount\\nCover: 161.25\\nGain: 14.2907562\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"3\\\" [label = \\\"Credit.amount\\nCover: 13.75\\nGain: 4.99748898\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"4\\\" [label = \\\"Duration\\nCover: 158.25\\nGain: 8.31948853\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"5\\\" [label = \\\"Credit.amount\\nCover: 3\\nGain: 0.565656662\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"6\\\" [label = \\\"Age\\nCover: 8\\nGain: 1.17460299\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"7\\\" [label = \\\"Credit.amount\\nCover: 5.75\\nGain: 2.98316503\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"8\\\" [label = \\\"SexBi\\nCover: 34.75\\nGain: 5.4197998\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"9\\\" [label = \\\"Credit.amount\\nCover: 123.5\\nGain: 9.04386902\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"10\\\" [label = \\\"Leaf\\nCover: 1.75\\nValue: -0.127272725\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"11\\\" [label = \\\"Leaf\\nCover: 1.25\\nValue: -0.0222222228\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"12\\\" [label = \\\"Leaf\\nCover: 2\\nValue: -0.13333334\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"13\\\" [label = \\\"Age\\nCover: 6\\nGain: 2.53614807\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"14\\\" [label = \\\"Duration\\nCover: 4.5\\nGain: 0.940908909\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"15\\\" [label = \\\"Leaf\\nCover: 1.25\\nValue: -0.0666666701\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"16\\\" [label = \\\"Leaf\\nCover: 22.75\\nValue: 0.170526311\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"17\\\" [label = \\\"Age\\nCover: 12\\nGain: 2.89102554\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"18\\\" [label = \\\"Credit.amount\\nCover: 20.25\\nGain: 5.77318478\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"19\\\" [label = \\\"Age\\nCover: 103.25\\nGain: 4.16007996\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"20\\\" [label = \\\"Credit.amount\\nCover: 3.75\\nGain: 1.04736841\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"21\\\" [label = \\\"Leaf\\nCover: 2.25\\nValue: -0.107692316\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"22\\\" [label = \\\"Age\\nCover: 3\\nGain: 0.679292917\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"23\\\" [label = \\\"Leaf\\nCover: 1.5\\nValue: 0.120000005\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"24\\\" [label = \\\"Leaf\\nCover: 1\\nValue: -0.0500000007\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"25\\\" [label = \\\"Age\\nCover: 11\\nGain: 1.38893127\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"26\\\" [label = \\\"Credit.amount\\nCover: 17.5\\nGain: 1.2231586\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"27\\\" [label = \\\"Duration\\nCover: 2.75\\nGain: 1.18787885\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"28\\\" [label = \\\"Duration\\nCover: 37.75\\nGain: 8.78602219\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"29\\\" [label = \\\"Duration\\nCover: 65.5\\nGain: 0.896308899\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"30\\\" [label = \\\"Credit.amount\\nCover: 2.75\\nGain: 0.218181789\\\", shape = \\\"rectangle\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Beige\\\"] \\n  \\\"31\\\" [label = \\\"Leaf\\nCover: 1\\nValue: -0.0500000007\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"32\\\" [label = \\\"Leaf\\nCover: 1.75\\nValue: 0.0545454584\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"33\\\" [label = \\\"Leaf\\nCover: 1.25\\nValue: -0.0222222228\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"34\\\" [label = \\\"Leaf\\nCover: 6.25\\nValue: 0.0482758619\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"35\\\" [label = \\\"Leaf\\nCover: 4.75\\nValue: 0.130434796\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"36\\\" [label = \\\"Leaf\\nCover: 11.25\\nValue: 0.0204081647\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"37\\\" [label = \\\"Leaf\\nCover: 6.25\\nValue: 0.0758620724\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"38\\\" [label = \\\"Leaf\\nCover: 1\\nValue: 0\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"39\\\" [label = \\\"Leaf\\nCover: 1.75\\nValue: -0.127272725\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"40\\\" [label = \\\"Leaf\\nCover: 32.75\\nValue: 0.0844444484\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"41\\\" [label = \\\"Leaf\\nCover: 5\\nValue: -0.0500000007\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"42\\\" [label = \\\"Leaf\\nCover: 18.25\\nValue: 0.137662336\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"43\\\" [label = \\\"Leaf\\nCover: 47.25\\nValue: 0.0984455943\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"44\\\" [label = \\\"Leaf\\nCover: 1\\nValue: 0\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n  \\\"45\\\" [label = \\\"Leaf\\nCover: 1.75\\nValue: 0.0545454584\\\", shape = \\\"oval\\\", fontcolor = \\\"black\\\", fillcolor = \\\"Khaki\\\"] \\n\\\"1\\\"->\\\"2\\\" [label = \\\"< 43.5\\\", style = \\\"bold\\\"] \\n\\\"2\\\"->\\\"4\\\" [label = \\\"< 11849\\\", style = \\\"bold\\\"] \\n\\\"3\\\"->\\\"6\\\" [label = \\\"< 7413\\\", style = \\\"bold\\\"] \\n\\\"4\\\"->\\\"8\\\" [label = \\\"< 11.5\\\", style = \\\"bold\\\"] \\n\\\"5\\\"->\\\"10\\\" [label = \\\"< 13577.5\\\", style = \\\"bold\\\"] \\n\\\"6\\\"->\\\"12\\\" [label = \\\"< 25.5\\\", style = \\\"bold\\\"] \\n\\\"7\\\"->\\\"14\\\" [label = \\\"< 14088.5\\\", style = \\\"bold\\\"] \\n\\\"8\\\"->\\\"16\\\" [label = \\\"< 0.5\\\", style = \\\"bold\\\"] \\n\\\"9\\\"->\\\"18\\\" [label = \\\"< 1250\\\", style = \\\"bold\\\"] \\n\\\"13\\\"->\\\"20\\\" [label = \\\"< 43\\\", style = \\\"bold\\\"] \\n\\\"14\\\"->\\\"22\\\" [label = \\\"< 51\\\", style = \\\"bold\\\"] \\n\\\"17\\\"->\\\"24\\\" [label = \\\"< 22.5\\\", style = \\\"bold\\\"] \\n\\\"18\\\"->\\\"26\\\" [label = \\\"< 1187.5\\\", style = \\\"bold\\\"] \\n\\\"19\\\"->\\\"28\\\" [label = \\\"< 29.5\\\", style = \\\"bold\\\"] \\n\\\"20\\\"->\\\"30\\\" [label = \\\"< 6642.5\\\", style = \\\"bold\\\"] \\n\\\"22\\\"->\\\"32\\\" [label = \\\"< 38\\\", style = \\\"bold\\\"] \\n\\\"25\\\"->\\\"34\\\" [label = \\\"< 36\\\", style = \\\"bold\\\"] \\n\\\"26\\\"->\\\"36\\\" [label = \\\"< 962.5\\\", style = \\\"bold\\\"] \\n\\\"27\\\"->\\\"38\\\" [label = \\\"< 15\\\", style = \\\"bold\\\"] \\n\\\"28\\\"->\\\"40\\\" [label = \\\"< 31.5\\\", style = \\\"bold\\\"] \\n\\\"29\\\"->\\\"42\\\" [label = \\\"< 16.5\\\", style = \\\"bold\\\"] \\n\\\"30\\\"->\\\"44\\\" [label = \\\"< 4245\\\", style = \\\"bold\\\"] \\n\\\"1\\\"->\\\"3\\\" [style = \\\"bold\\\", style = \\\"solid\\\"] \\n\\\"2\\\"->\\\"5\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"3\\\"->\\\"7\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"4\\\"->\\\"9\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"5\\\"->\\\"11\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"6\\\"->\\\"13\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"7\\\"->\\\"15\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"8\\\"->\\\"17\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"9\\\"->\\\"19\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"13\\\"->\\\"21\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"14\\\"->\\\"23\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"17\\\"->\\\"25\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"18\\\"->\\\"27\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"19\\\"->\\\"29\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"20\\\"->\\\"31\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"22\\\"->\\\"33\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"25\\\"->\\\"35\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"26\\\"->\\\"37\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"27\\\"->\\\"39\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"28\\\"->\\\"41\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"29\\\"->\\\"43\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n\\\"30\\\"->\\\"45\\\" [style = \\\"solid\\\", style = \\\"solid\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Predição\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparametros <- list(objective = \"binary:logistic\", \n                    eval_metric = \"error\"\n                   )\nmodelo <- xgboost(data = as.matrix(X_train),\n                  label = as.matrix(y_train),\n                  nrounds = 100,\n                  eta =0.1,\n                  params = parametros)\n```\n:::\n\n\n## Resultados\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR1 <- predict(modelo,newdata = data.matrix(X_test)) |>  \n  as_tibble() |> \n  mutate(R = if_else(value >= 0.5,1,0))\nR1 |> head() |> \n  knitr::kable(col.names = c(\"values\",\"R\"),align =\"l\")\n```\n\n::: {.cell-output-display}\n|values    |R  |\n|:---------|:--|\n|0.9893589 |1  |\n|0.8878149 |1  |\n|0.9059939 |1  |\n|0.4113036 |0  |\n|0.5090782 |1  |\n|0.0504705 |0  |\n:::\n:::\n\n\nAcurácia do modelo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAc <- mean(R1$R == y_test$RiskBi)*100\npaste(\"A acurácia é de\",Ac,\"%\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A acurácia é de 68 %\"\n```\n:::\n:::\n\n\n## Conclusão\n\nEsse post é uma apresentação bem resumida sobre o tema de aprendizado de máquina. Existem difentes formas de se construir e avaliar um modelo de predição. Podemos melhorar a seleção de dados, a construção do modelo e escolher métricas mais adequadas , tudo isso vai depender da natureza do problema.\n\n## Ver também\n\n-   [Sigmoidal](https://sigmoidal.ai/xgboost-aprenda-algoritmo-de-machine-learning-em-python/)\n\n-   [Yukio Andre](https://github.com/yukioandre)\n",
    "supporting": [
      "xgboost_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.0/htmlwidgets.js\"></script>\r\n<script src=\"../../site_libs/viz-1.8.2/viz.js\"></script>\r\n<link href=\"../../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/grViz-binding-1.0.9/grViz.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}